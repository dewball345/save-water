{"version":3,"sources":["providers/firebase.js","providers/firebaseauthprovider.js","providers/firebasedbprovider.js"],"names":["firebase","apps","length","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","db","database","FBAuthContext","createContext","FirebaseAuthProvider","children","useState","currentUser","setCurrentUser","isloading","setLoading","email","password","a","signInWithEmailAndPassword","res","signOut","createUserWithEmailAndPassword","useEffect","onAuthStateChanged","user","value","login","logout","register","Provider","DBContext","FirebaseDBProvider","useContext","userId","changeUID","label","multiplier","changeMultiplier","encrypt","jsonString","CryptoJS","uid","toString","decrypt","encryptstring","bytes","JSON","parse","Utf8","data","start","stateMap","changeStateMap","getUserData","useCallback","dir","ref","get","val","clear","i","thingFunc","getData","console","log","undefined","stringify","storageItems","secondPart","dirs","split","op","forEach","Function","operation","remove","last","slice","element","accessor","set","writeUserData","syncData","deleteUserData","options"],"mappings":"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","file":"static/js/7.f63ae76f.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n\r\n//STOP undo here: 4/4/2021\r\nvar firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_apiKey,\r\n    authDomain: process.env.REACT_APP_authDomain,\r\n    projectId: process.env.REACT_APP_projectId,\r\n    storageBucket: process.env.REACT_APP_storageBucket,\r\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\r\n    appId: process.env.REACT_APP_appId\r\n};\r\n\r\nif(!firebase.apps.length){\r\n    firebase.initializeApp(firebaseConfig);\r\n} else {\r\n    firebase.app();\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const db = firebase.database();\r\n\r\n","import {auth} from './firebase.js';\r\nimport {useState, useEffect, createContext} from 'react';\r\n\r\n\r\nexport const FBAuthContext = createContext();\r\n\r\n//UNDOUNDO\r\nexport default function FirebaseAuthProvider({children}){\r\n    const [currentUser, setCurrentUser] = useState();\r\n    const [isloading, setLoading] = useState(true);\r\n\r\n    async function login(email, password){\r\n        let res = await auth.signInWithEmailAndPassword(email, password);\r\n        return res;\r\n    }\r\n\r\n    async function logout(){\r\n        let res = await auth.signOut()\r\n        return res;\r\n    }\r\n\r\n    async function register(email, password){\r\n        let res = await auth.createUserWithEmailAndPassword(email, password)\r\n        \r\n        return res;\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        const unsubscribe = auth.onAuthStateChanged((user) => {\r\n            // console.log(\"executed here\")\r\n            // console.log(\"CURRENT USER IN AUTH\")\r\n            // console.log(user)\r\n            setCurrentUser(user);\r\n            setLoading(false)\r\n        })\r\n        return () => {\r\n            setCurrentUser({});\r\n            setLoading({})\r\n        };\r\n    }, []);\r\n\r\n    const value = {\r\n        currentUser,\r\n        isloading,\r\n        login,\r\n        logout,\r\n        register\r\n    }\r\n\r\n    return (\r\n        <FBAuthContext.Provider value={value}>\r\n            {children}\r\n        </FBAuthContext.Provider>\r\n    )\r\n}","import {db} from './firebase.js';\r\nimport {createContext, useContext, useState, useEffect, useCallback} from 'react';\r\nimport {FBAuthContext} from './firebaseauthprovider';\r\nimport * as CryptoJS from 'crypto-js';\r\nimport * as i from 'idb-keyval'\r\n\r\n\r\n\r\n\r\n//UNDO HERE: 4/11/21 encryption\r\nexport const DBContext = createContext();\r\n\r\n//UNDOUNDO\r\n//Undo here - 4/6/21\r\nexport default function FirebaseDBProvider({children}){\r\n    //Undo here - 3/15/21\r\n    let auth = useContext(FBAuthContext);\r\n    // console.log(auth.currentUser.uid)\r\n    const [userId, changeUID] = useState();\r\n    const [reload, changeReload] = useState();\r\n    const [multiplier, changeMultiplier] = useState({value: 1, label: \" mL\"})\r\n    const options = [\r\n        {\r\n            value: 1/1000,\r\n            label: \" L\"\r\n        },\r\n        {\r\n            value: 0.000264,\r\n            label: \" g\"\r\n        },\r\n        {value: 1, label: \" mL\"}\r\n    ]\r\n    // const [logout, changeLogout] = useState(false);\r\n    // const storage = window.localStorage;\r\n    \r\n\r\n    function encrypt(jsonString){\r\n \r\n        // Encrypt\r\n        let ciphertext = CryptoJS.AES.encrypt(jsonString, auth.currentUser.uid).toString();\r\n        return ciphertext;\r\n\r\n    }\r\n\r\n    function decrypt(encryptstring){\r\n        // console.log(\"entered the decryption function\")\r\n        // console.log(auth.currentUser.uid)\r\n        // Decrypt\r\n        let bytes  = CryptoJS.AES.decrypt(encryptstring, auth.currentUser.uid);\r\n        let decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\r\n         \r\n        return decryptedData;\r\n    }\r\n\r\n    const [stateMap, changeStateMap] = useState({\r\n        data: {},\r\n        start: false\r\n    })\r\n\r\n    const getUserData = useCallback(async function getUserData(dir){\r\n        // console.log(\"ENTERED USECALLBACK\")\r\n        // console.log(userId + \"/\" + dir)\r\n        // console.log(\"entered usecallback\")\r\n        let data = await db.ref(userId + \"/\" + dir).get()\r\n        return data.val();\r\n    }, [userId]);\r\n\r\n    async function clear(){\r\n        await i.del('local-user-data')\r\n        // storage.clear()\r\n        // console.log(\"STARTING CHANGE LOGOUT\")\r\n        // changeLogout(true)\r\n        // console.log(\"CHANGED LOGOUT TO TRUE\")\r\n    }\r\n    async function syncData(){\r\n        await clear()\r\n        changeStateMap({\r\n            data: {},\r\n            start: false\r\n        })\r\n        thingFunc()\r\n    }\r\n\r\n    function thingFunc(){\r\n        // console.log(\"entered useEffect\")\r\n        async function getData(){\r\n            let data;\r\n            try{\r\n                data = await getUserData('/')\r\n            } catch(error){\r\n                console.log(\"failure. if it is just a logout function, don't worry\")\r\n                console.log(error)\r\n                return;\r\n            }\r\n            // console.log(\"USERID\")\r\n            // console.log(userId)\r\n            // console.log(data)\r\n            \r\n            if(auth.currentUser !== undefined){\r\n                if(data !== null){\r\n                    await i.set('local-user-data', encrypt(JSON.stringify(data)))\r\n\r\n                    changeStateMap({\r\n                        data: data,\r\n                        start: true\r\n                    });\r\n                } else {\r\n                    await i.set('local-user-data', encrypt(JSON.stringify({})))\r\n                }\r\n            }\r\n            // console.log(\"executed here\")\r\n        }\r\n        \r\n        \r\n        //REPLACE\r\n        // i.get('local-user-data')\r\n\r\n        // console.log(stateMap)\r\n        async function secondPart(){\r\n            // console.log(i.get('local-user-data'))\r\n            let storageItems = await i.get('local-user-data');\r\n            // console.log(raw)\r\n           \r\n            \r\n            // const storageItems = JSON.parse(get)\r\n            // console.log(storageItems)\r\n            // console.log(stateMap.start)\r\n\r\n            if(!stateMap.start){\r\n                console.log(\"entered\")\r\n                if(storageItems === null || storageItems === undefined){\r\n                    // console.log(\"get request to firebase\")\r\n                    await getData()\r\n                } else {\r\n                    // console.log(\"here(i'm doing the decryption!)\")\r\n                    \r\n                    // console.log(\"START:\" + stateMap.start)\r\n                    if(auth.currentUser !== undefined){\r\n                        storageItems = decrypt(storageItems)\r\n                        changeStateMap({data: storageItems, start:true})\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        secondPart()\r\n\r\n    }\r\n\r\n    useEffect(thingFunc, [stateMap.start, getUserData])\r\n\r\n    if(auth.currentUser !== undefined && auth.currentUser !== null){\r\n        if(userId === undefined){\r\n            changeUID(auth.currentUser.uid);\r\n        }\r\n        \r\n        // console.log(\"SET USERID\" + userId)\r\n    }\r\n\r\n    async function deleteUserData(dir){\r\n        let dirs = dir.split(\"/\");\r\n\r\n        let op = \"delete map\"\r\n        dirs.forEach((dir) => {\r\n          op += \"[\" + '\"' + dir + '\"' + \"]\"\r\n        })\r\n\r\n        let operation = new Function(\"map\", op)\r\n        operation(stateMap.data)\r\n\r\n        changeStateMap({data: stateMap[\"data\"], start:stateMap['start']})\r\n        await i.set('local-user-data', encrypt(JSON.stringify(stateMap['data'])))\r\n\r\n        await db.ref(userId + \"/\" + dir).remove();\r\n    }\r\n\r\n    async function writeUserData(dir, data) {\r\n\r\n        let dirs = dir.split('/');\r\n        if(dirs.length > 1){\r\n          let last = dirs[dirs.length - 1]\r\n          let dirList = dirs.slice(0, -1)\r\n          let accessor;\r\n          dirList.forEach(element => {\r\n              if(accessor === undefined || accessor === null) {\r\n                  if(stateMap.data[element] === undefined){\r\n                      stateMap.data[element] = {}\r\n                  } \r\n                  accessor = stateMap.data[element]\r\n              } else if(accessor[element] === undefined){\r\n                  accessor[element] = {}\r\n                  accessor = accessor[element]\r\n              } else {\r\n                  accessor = accessor[element]\r\n    \r\n              }\r\n            //   console.log(accessor)\r\n          });\r\n          accessor[last] = data;\r\n        } else {\r\n          stateMap.data[dirs[0]] = data\r\n        }\r\n\r\n        // let dirs = dir.split('/')\r\n        // let last = dirs[dirs.length - 1]\r\n        // let dirList = dirs.slice(0, -1)\r\n        // let accessor;\r\n        // dirList.forEach(element => {\r\n        //     if(accessor === undefined || accessor === null) {\r\n        //         console.log(\"STATEMAP: \" + stateMap.data)\r\n        //         if(stateMap.data[element] === undefined){\r\n        //             stateMap.data[element] = {}\r\n        //         } \r\n        //         accessor = stateMap.data[element]\r\n\r\n\r\n        //     } else {\r\n        //         accessor = accessor[element]\r\n        //     }\r\n        // });\r\n        // accessor[last] = data\r\n\r\n\r\n        // console.log(\"DIR\")\r\n        // console.log(last);\r\n        changeStateMap({data: stateMap['data'], start:stateMap['start']})\r\n        await i.set('local-user-data', encrypt(JSON.stringify(stateMap['data'])));\r\n        // console.log(stateMap.data)\r\n\r\n        await db.ref(userId + \"/\" + dir).set(data);\r\n\r\n        // console.log(await getUserData(dir))\r\n    }\r\n\r\n\r\n\r\n\r\n    let data = stateMap.data\r\n    const value = {\r\n        writeUserData,\r\n        syncData,\r\n        clear,\r\n        deleteUserData,\r\n        encrypt,\r\n        changeMultiplier,\r\n        multiplier,\r\n        options,\r\n        // getUserData,\r\n        data\r\n    }\r\n\r\n    return (\r\n        <DBContext.Provider value={value}>\r\n            {children}\r\n        </DBContext.Provider>\r\n    )\r\n}"],"sourceRoot":""}